{"version":3,"sources":["pages/test2/urlB64ToUint8Array.js","pages/test2/util.js","pages/test2/main.js"],"names":["urlB64ToUint8Array","base64String","base64","repeat","length","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","exports","_urlB64ToUint8Array","require","serverUrl","location","hostname","getPermission","Notification","requestPermission","status","console","log","getSubscription","pubkey","fetch","then","res","json","subscription","navigator","serviceWorker","getRegistration","registration","pushManager","subscribe","userVisibleOnly","applicationServerKey","mySubscription","sendToServer","JSON","stringify","toJSON","method","body","headers","catch","err","error","sendMessageViaServer","message","document","getElementById","value","displayNotificationDirectly","permission","options","icon","vibrate","data","dateOfArrival","Date","now","primaryKey","actions","action","title","showNotification","util","_interopRequireWildcard","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","set","addEventListener","register","scope","update","forEach","func"],"mappings":"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","file":"main.6d50f6e8.js","sourceRoot":"..","sourcesContent":["export const urlB64ToUint8Array = (base64String) => {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n};","import { urlB64ToUint8Array } from './urlB64ToUint8Array.js';\n\nconst serverUrl = `http://${window.location.hostname}:3000`;\n\nexport const getPermission = () => {\n  Notification.requestPermission(function (status) {\n    console.log('Notification permission status:', status);\n  });\n};\n\nexport const getSubscription = async () => {\n  const { pubkey } = await fetch(`${serverUrl}/pubkey`).then((res) => res.json());\n  console.log('fetched public key:', pubkey);\n  const subscription = await navigator.serviceWorker\n    .getRegistration() //\n    .then((registration) => {\n      return registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlB64ToUint8Array(pubkey),\n      });\n    });\n  console.log('created subscription:', subscription);\n  // in production we would send it directly to our server and not store it on the window\n  window.mySubscription = subscription;\n};\n\nexport const sendToServer = async () => {\n  if (!window.mySubscription) {\n    console.log('No subscription yet created');\n    return;\n  }\n  const subscription = JSON.stringify(window.mySubscription.toJSON(), null, 2);\n\n  fetch(`${serverUrl}/subscription`, {\n    method: 'POST',\n    body: subscription,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n    .then((res) => console.log('successfully send subscription to server'))\n    .catch((err) => console.error('error while sending to server', err));\n};\n\nexport const sendMessageViaServer = async () => {\n  const message = document.getElementById('message').value;\n  const body = JSON.stringify({ message }, null, 2);\n\n  fetch(`${serverUrl}/send`, {\n    method: 'POST',\n    body,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n    .then((res) => console.log('successfully send message via server to push service'))\n    .catch((err) => console.error('error while sending to server', err));\n};\n\nexport const displayNotificationDirectly = async () => {\n  if (Notification.permission !== 'granted') {\n    console.log('notification permission missing');\n    return;\n  }\n\n  const options = {\n    body: 'This notification is send without a server, directly by the browser',\n    icon: 'images/checkmark.png',\n    vibrate: [100, 50, 100],\n    data: {\n      dateOfArrival: Date.now(),\n      primaryKey: 1,\n    },\n    actions: [\n      {\n        action: 'explore',\n        title: 'Explore this new world',\n        icon: 'images/checkmark.png',\n      },\n      {\n        action: 'close',\n        title: 'Close notification',\n        icon: 'images/xmark.png',\n      },\n    ],\n  };\n\n  const registration = await navigator.serviceWorker.getRegistration();\n  registration.showNotification('Notification without Push API', options);\n};","import * as util from './util.js';\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('./service-worker.js')\n      .then((registration) => {\n        console.log(`ServiceWorker registration successful with scope: ${registration.scope}`);\n        return registration.update();\n      })\n      .then((registration) => console.log(`ServiceWorker updated`))\n      .catch((err) => console.log('ServiceWorker registration failed: ', err));\n  });\n}\n\n['getPermission', 'getSubscription', 'sendToServer', 'sendMessageViaServer', 'displayNotificationDirectly'].forEach(\n  (func) => {\n    document.getElementById(`btn-${func}`).addEventListener('click', () => {\n      util[func]();\n    });\n  }\n);"]}