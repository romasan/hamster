{"version":3,"sources":["src/Cover/index.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.8dcbad06.js","sourceRoot":"..","sourcesContent":["class Cover {\r\n    state = {};\r\n    constructor (data) {\r\n        this.setState(data);\r\n        const { ctx, image, left, top, position, degrees, size, scale } = data;\r\n        // ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        let width = size?.width || image.width;\r\n        let height = size?.height || image.height;\r\n        const _left = left || position?.x || 0;\r\n        const _top = top || position?.y || 0;\r\n        if (scale) {\r\n            width = width * scale;\r\n            height = height * scale;\r\n        }\r\n\r\n        if (typeof degrees === 'number') {\r\n            ctx.save();\r\n            ctx.translate(_left + width / 2, _top + height / 2);\r\n            ctx.rotate(degrees * Math.PI / 180);\r\n            ctx.drawImage(image, -width / 2, -height / 2, width, height);\r\n            ctx.restore();\r\n        } else {\r\n            ctx.drawImage(image, _left, _top, width, height);\r\n        }\r\n    }\r\n\r\n    setState({ ctx, image, left, top, position, degrees, width, height, size, scale }) {\r\n        // console.log('==== pong', this.state);\r\n\r\n        let _width = width || size?.width || this.state.width || image.width;\r\n        let _height = height || size?.height || this.state.height || image.height;\r\n        if (typeof scale === 'number') {\r\n            _width = image.width * scale;\r\n            _height = image.height * scale;\r\n        }\r\n        const _left = (typeof left === 'number' && left) || (typeof position?.x === 'number' && position.x) || 0;\r\n        const _top = (typeof top === 'number' && top) || (typeof position?.y === 'number' && position.y) || 0;\r\n\r\n        this.state = {\r\n            ctx: ctx || this.state.ctx,\r\n            image: image || this.state.image,\r\n            left: _left,\r\n            top: _top,\r\n            degrees: typeof degrees === 'number' ? degrees : this.state.degrees,\r\n            width: _width,\r\n            height: height,\r\n        }\r\n    }\r\n}\r\n\r\nexport default Cover;\r\n","import Cover from './Cover';\r\n\r\nconst loadImage = src => new Promise(resolve => {\r\n    const image = new Image();\r\n    image.src = src;\r\n    image.onload = e => {\r\n        resolve(e.target);\r\n    };\r\n});\r\nconst render = (callback, start?) => {\r\n    if (!start) {\r\n        start = Date.now();\r\n    }\r\n    if (callback(Date.now() - start)) {\r\n        requestAnimationFrame(() => render(callback, start));\r\n    }\r\n}\r\nconst initCanvas = async () => {\r\n    const w = document.body.offsetWidth, h = document.body.offsetHeight;\r\n    const canvas = document.querySelector('canvas');\r\n    canvas.width = w;\r\n    canvas.height = h;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    const images = await Promise.all([\r\n        '/assets/1.PNG',\r\n        '/assets/2.PNG',\r\n        '/assets/3.PNG',\r\n        '/assets/4.png',\r\n        '/assets/5.PNG',\r\n        '/assets/6.PNG',\r\n        '/assets/7.PNG',\r\n        '/assets/8.PNG',\r\n        '/assets/9.PNG',\r\n        '/assets/10.PNG',\r\n    ].map(loadImage));\r\n\r\n    // const { width, height } = img;\r\n    // ctx.drawImage(img, 100, 100, width / 2, height / 2);\r\n\r\n    // let img = images[7];\r\n    for (const img of images) {\r\n        const x = Math.floor(Math.random() * w); \r\n        const y = Math.floor(Math.random() * h); \r\n        const degrees = Math.floor(Math.random() * 360);\r\n\r\n        new Cover({\r\n            ctx,\r\n            image: img,\r\n            position: { x, y },\r\n            scale: 0.25,\r\n            degrees\r\n        });\r\n\r\n        new Cover({\r\n            ctx,\r\n            image: img,\r\n            position: { x: x - w, y },\r\n            scale: 0.25,\r\n            degrees\r\n        });\r\n\r\n        new Cover({\r\n            ctx,\r\n            image: img,\r\n            position: { x, y: y - h },\r\n            scale: 0.25,\r\n            degrees\r\n        });\r\n\r\n    }\r\n    let i = 0;\r\n    render(t => {\r\n        console.log('====', ++i, t);\r\n        return t < 100;\r\n    });\r\n};\r\nconst main = () => {\r\n    initCanvas();\r\n};\r\n\r\ndocument.addEventListener('DOMContentLoaded', main);\r\n"]}