{"version":3,"sources":["src/helpers.ts","src/Cover/index.ts","src/index.ts"],"names":[],"mappings":";AAAa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EAAN,IAAM,EAAS,SAAC,EAAG,EAAG,EAAG,EAAG,GACzB,IAAA,EAAW,EAAI,EACf,EAAW,EAAI,EACf,EAAK,EAAI,KAAK,GAAK,IAClB,MAAA,CACH,EAAI,EAAI,KAAK,IAAI,GAAK,GAAM,EAAW,KAAK,IAAI,GAAM,EAAW,KAAK,IAAI,IAC1E,EAAI,EAAI,KAAK,IAAI,GAAK,GAAM,EAAW,KAAK,IAAI,GAAM,EAAW,KAAK,IAAI,MANrE,QAAA,OAAM;;AC4GnB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA5GA,IAAA,EAAA,QAAA,cAYA,EAAA,WAGI,SAAA,EAAa,GAFb,KAAA,MAAe,GAGN,KAAA,SAAS,GA0FtB,OAvFI,EAAA,UAAA,SAAA,SAAS,GAAE,IAAA,EAAG,EAAA,IAAE,EAAK,EAAA,MAAE,EAAI,EAAA,KAAE,EAAG,EAAA,IAAE,EAAQ,EAAA,SAAE,EAAO,EAAA,QAAE,EAAK,EAAA,MAAE,EAAM,EAAA,OAAE,EAAI,EAAA,KAAE,EAAK,EAAA,MACrE,EAAyB,iBAAT,GAAqB,GAAiC,iBAAhB,MAAA,OAAQ,EAAR,EAAU,IAAkB,EAAS,GAAM,KAAK,MAAM,MAAQ,EACpH,EAAuB,iBAAR,GAAoB,GAAgC,iBAAhB,MAAA,OAAQ,EAAR,EAAU,IAAkB,EAAS,GAAM,KAAK,MAAM,KAAO,EAChH,EAAS,GAAS,KAAK,MAAM,MAC/B,EAAS,IAAS,MAAA,OAAI,EAAJ,EAAM,QAAS,KAAK,MAAM,OAAS,EAAO,MAC5D,EAAU,IAAU,MAAA,OAAI,EAAJ,EAAM,SAAU,KAAK,MAAM,QAAU,EAAO,OAgB7D,MAfc,iBAAV,IACP,GAAS,MAAA,OAAM,EAAN,EAAQ,OAAQ,EACzB,GAAU,MAAA,OAAM,EAAN,EAAQ,QAAS,GAG1B,KAAA,MAAQ,CACT,IAAK,GAAO,KAAK,MAAM,IACvB,MAAO,GAAS,KAAK,MAAM,MAC3B,KAAM,EACN,IAAK,EACL,MAAO,EACP,OAAQ,EACR,QAA4B,iBAAZ,EAAuB,EAAU,KAAK,MAAM,SAGzD,MAGX,EAAA,UAAA,QAAA,WACU,IAAA,EAAiD,KAAK,MAA/C,GAAF,EAAA,IAAM,EAAA,MAAE,EAAG,EAAA,IAAE,EAAK,EAAA,MAAE,EAAM,EAAA,OAAE,EAAA,EAAA,QAAA,OAAO,IAAA,EAAG,EAAC,EAE5C,EAAK,EAAA,OAAO,EAAM,EAAK,EAAO,EAAQ,GACtC,EAAK,EAAA,OAAO,EAAM,GAAM,EAAO,EAAQ,GACvC,EAAK,EAAA,OAAO,EAAM,GAAM,GAAQ,EAAQ,GACxC,EAAK,EAAA,OAAO,EAAM,EAAK,GAAQ,EAAQ,GAEvC,EAAI,KAAK,IAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClC,EAAQ,KAAK,IAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtC,EAAI,KAAK,IAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClC,EAAS,KAAK,IAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAYtC,MAAA,CACH,EAAC,EACD,EAAC,EACD,MAAO,EAAQ,EACf,OAAQ,EAAS,EACjB,IAAK,EACL,MAAK,EACL,OAAM,EACN,KAAM,IAId,EAAA,UAAA,KAAA,SAAK,GACK,IAAA,EAA2E,GAAQ,GAAjF,EAAG,EAAA,IAAE,EAAK,EAAA,MAAE,EAAI,EAAA,KAAE,EAAG,EAAA,IAAE,EAAQ,EAAA,SAAE,EAAO,EAAA,QAAE,EAAK,EAAA,MAAE,EAAM,EAAA,OAAE,EAAI,EAAA,KAAE,EAAK,EAAA,MACtE,EAAO,KAAK,MAAM,KAAO,EACzB,EAAS,KAAK,MAAM,OAAS,EAC7B,EAAyB,iBAAT,GAAqB,GAAiC,iBAAhB,MAAA,OAAQ,EAAR,EAAU,IAAkB,EAAS,GAAM,KAAK,MAAM,MAAQ,EACpH,EAAuB,iBAAR,GAAoB,GAAgC,iBAAhB,MAAA,OAAQ,EAAR,EAAU,IAAkB,EAAS,GAAM,KAAK,MAAM,KAAO,EAClH,EAAS,IAAS,MAAA,OAAI,EAAJ,EAAM,QAAS,KAAK,MAAM,QAAS,MAAA,OAAK,EAAL,EAAO,OAC5D,EAAU,IAAU,MAAA,OAAI,EAAJ,EAAM,SAAU,KAAK,MAAM,SAAU,MAAA,OAAK,EAAL,EAAO,QAC/C,iBAAV,IACP,GAAS,MAAA,OAAK,EAAL,EAAO,OAAQ,EACxB,GAAU,MAAA,OAAK,EAAL,EAAO,QAAS,GAExB,IAAA,EAA8B,iBAAZ,EAAuB,EAAU,KAAK,MAAM,QAW7D,MAViB,iBAAb,GACP,EAAK,OACL,EAAK,UAAU,EAAQ,EAAS,EAAG,EAAO,EAAU,GACpD,EAAK,OAAO,EAAW,KAAK,GAAK,KACjC,EAAK,UAAU,GAAS,EAAS,GAAI,EAAU,EAAG,EAAQ,GAC1D,EAAK,WAEL,EAAK,UAAU,EAAQ,EAAO,EAAM,EAAQ,GAGzC,MAKf,EA9FA,GAgGA,QAAA,QAAe;;ACXf,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,aAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,MAAA,EAAA,KAAA,WAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,KAAA,GAAA,IAAA,IAAA,OAAA,EAAA,CAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,mBAAA,SAAA,EAAA,OAAA,UAAA,WAAA,OAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,SAAA,GAAA,OAAA,SAAA,GAAA,GAAA,EAAA,MAAA,IAAA,UAAA,mCAAA,KAAA,GAAA,IAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,GAAA,EAAA,SAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KAAA,OAAA,EAAA,OAAA,EAAA,EAAA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,OAAA,EAAA,QAAA,CAAA,MAAA,EAAA,GAAA,MAAA,GAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,GAAA,EAAA,CAAA,GAAA,SAAA,KAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,QAAA,KAAA,GAAA,EAAA,EAAA,MAAA,OAAA,GAAA,EAAA,EAAA,OAAA,MAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,CAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,MAAA,EAAA,GAAA,MAAA,GAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,KAAA,GAAA,MAAA,EAAA,IAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,EAAA,EAAA,KAAA,EAAA,GAAA,MAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,MAAA,CAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA,MAAA,GAAA,CAAA,CAAA,EAAA,OAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjGA,IAAA,EAAA,EAAA,QAAA,YAEM,EAAY,SAAA,GAAO,OAAA,IAAI,QAAQ,SAAA,GAC3B,IAAA,EAAQ,IAAI,MAClB,EAAM,IAAM,EACZ,EAAM,OAAS,SAAA,GACX,EAAQ,EAAE,YAIZ,EAAS,SAAC,EAAU,GACjB,IACD,EAAQ,KAAK,OAEb,EAAS,KAAK,MAAQ,IACtB,sBAAsB,WAAM,OAAA,EAAO,EAAU,MAI/C,EAAa,WAAA,OAAA,OAAA,OAAA,OAAA,EAAA,WA8EnB,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAvEmB,OANT,EAAI,SAAS,KAAK,YAAa,EAAI,SAAS,KAAK,cACjD,EAAS,SAAS,cAAc,WAC/B,MAAQ,EACf,EAAO,OAAS,EACV,EAAM,EAAO,WAAW,MAEf,CAAA,EAAM,QAAQ,IAAI,CAC7B,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,kBACF,IAAI,KA4DV,KAAA,EAAA,OAvEU,EAAS,EAAA,OAaT,EAAO,EAAO,IAAI,SAAA,GACd,IAEyC,EAFzC,EAAI,KAAK,SAAW,EACpB,EAAI,KAAK,SAAW,EAYnB,MAAA,CAAE,EAAC,EAAE,EAAC,EAAE,OAXA,IAAuB,IAAhB,KAAK,WAAoB,EAAyC,KAAK,SAAW,GAApD,KAAK,GAAK,EAAI,OAAS,SAAS,IAW9D,OAVP,CACX,EAAmB,GAAhB,KAAK,SAAiB,GACzB,EAAmB,GAAhB,KAAK,SAAiB,IAQC,MANhB,IAAI,EAAA,QAAM,CACpB,IAAG,EACH,MAAO,EACP,SAAU,CAAE,EAAC,EAAE,EAAC,GAChB,MAAO,QAKf,EAAI,KAAO,aAEX,EAAO,SAAA,GAgCI,OA9BP,EAAI,UAAU,EAAG,EAAG,EAAG,GAEvB,EAAK,QAAQ,SAAA,GACH,IAAA,EAAW,EAAI,EAAK,MAAS,IAC7B,GAAQ,EAAK,EAAI,EAAI,EAAK,OAAO,GAAK,EACtC,GAAO,EAAK,EAAI,EAAI,EAAK,OAAO,GAAK,EACrC,EAAO,EAAK,MACb,SAAS,CAAE,QAAO,EAAE,KAAI,EAAE,IAAG,IAC7B,OACA,UAED,EAAK,MAAQ,GAAK,EAAK,OAAS,GAChC,EAAK,MAAM,KAAK,CAAE,QAAO,EAAE,KAAM,EAAO,EAAG,IAAK,EAAM,IAEtD,EAAK,MAAQ,GACb,EAAK,MAAM,KAAK,CAAE,QAAO,EAAE,KAAM,EAAO,EAAG,IAAG,IAE9C,EAAK,OAAS,GACd,EAAK,MAAM,KAAK,CAAE,QAAO,EAAE,KAAI,EAAE,IAAK,EAAM,MAUzC,GAEJ,IAOf,CAAA,SAJM,EAAO,WACT,KAGJ,SAAS,iBAAiB,mBAAoB","file":"src.cd12c38d.js","sourceRoot":"..","sourcesContent":["export const rotate = (x, y, w, h, d) => {\n    const center_x = w / 2;\n    const center_y = h / 2;\n    const _d = d * Math.PI / 180;\n    return {\n        x: (x + Math.abs(w) / 2) - (center_x * Math.cos(_d) - center_y * Math.sin(_d)),\n        y: (y + Math.abs(h) / 2) - (center_y * Math.cos(_d) + center_x * Math.sin(_d))\n    };\n};\n","import { rotate } from '../helpers';\n\ninterface State {\n    ctx?: CanvasRenderingContext2D;\n    image?: any;\n    left?: number;\n    top?: number;\n    width?: number;\n    height?: number;\n    degrees?: number;\n}\n\nclass Cover {\n    state: State = {};\n\n    constructor (data) {\n        this.setState(data);\n    }\n\n    setState({ ctx, image, left, top, position, degrees, width, height, size, scale }) {\n        const _left = (typeof left === 'number' && left) || (typeof position?.x === 'number' && position.x) || this.state.left || 0;\n        const _top = (typeof top === 'number' && top) || (typeof position?.y === 'number' && position.y) || this.state.top || 0;\n        const _image = image || this.state.image;\n        let _width = width || size?.width || this.state.width || _image.width;\n        let _height = height || size?.height || this.state.height || _image.height;\n        if (typeof scale === 'number') {\n            _width = _image?.width * scale;\n            _height = _image?.height * scale;\n        }\n\n        this.state = {\n            ctx: ctx || this.state.ctx,\n            image: image || this.state.image,\n            left: _left,\n            top: _top,\n            width: _width,\n            height: _height,\n            degrees: typeof degrees === 'number' ? degrees : this.state.degrees,\n        }\n\n        return this;\n    }\n\n    getRect() {\n        const { ctx, left, top, width, height, degrees = 0 } = this.state;\n\n        const lt = rotate(left, top, width, height, degrees);\n        const rt = rotate(left, top, -width, height, degrees);\n        const rb = rotate(left, top, -width, -height, degrees);\n        const lb = rotate(left, top, width, -height, degrees);\n\n        const x = Math.min(lt.x, rt.x, rb.x, lb.x);\n        const right = Math.max(lt.x, rt.x, rb.x, lb.x);\n        const y = Math.min(lt.y, rt.y, rb.y, lb.y);\n        const bottom = Math.max(lt.y, rt.y, rb.y, lb.y);\n\n        if (process.env.NODE_ENV === 'development') {\n            ctx.strokeStyle = '#ffff00';\n            ctx.strokeRect(\n                Math.floor(x),\n                Math.floor(y),\n                Math.floor(right - x),\n                Math.floor(bottom - y)\n            );\n        }\n\n        return {\n            x,\n            y,\n            width: right - x,\n            height: bottom - y,\n            top: y,\n            right,\n            bottom,\n            left: x,\n        };\n    }\n\n    draw(data?) {\n        const { ctx, image, left, top, position, degrees, width, height, size, scale } = data || {};\n        const _ctx = this.state.ctx || ctx;\n        const _image = this.state.image || image;\n        const _left = (typeof left === 'number' && left) || (typeof position?.x === 'number' && position.x) || this.state.left || 0;\n        const _top = (typeof top === 'number' && top) || (typeof position?.y === 'number' && position.y) || this.state.top || 0;\n        let _width = width || size?.width || this.state.width || image?.width;\n        let _height = height || size?.height || this.state.height || image?.height;\n        if (typeof scale === 'number') {\n            _width = image?.width * scale;\n            _height = image?.height * scale;\n        }\n        const _degrees = typeof degrees === 'number' ? degrees : this.state.degrees;\n        if (typeof _degrees === 'number') {\n            _ctx.save();\n            _ctx.translate(_left + _width / 2, _top + _height / 2);\n            _ctx.rotate(_degrees * Math.PI / 180);\n            _ctx.drawImage(_image, -_width / 2, -_height / 2, _width, _height);\n            _ctx.restore();\n        } else {\n            _ctx.drawImage(_image, _left, _top, _width, _height);\n        }\n\n        return this;\n\n        // const p = new Path2D('M 182.09339787497646 269.42132084132953 C 246.05278780904104 349.6243653618232 294.27613736250237 303.93908683749135 295.7989799799801 301.4010158083618 C 297.32182259745787 298.8629447792323 384.12385179368835 253.17766625490046 317.62639083049424 215.61421502378317 C 251.12892986730014 178.0507637926659 190.72283937401696 120.69035853433817 175.49441319923966 165.36040864701818 C 160.26598702446236 210.03045875969818 118.13400794091189 189.21827632083586 182.09339787497646 269.42132084132953 z');\n        // _ctx.fill(p);\n    }\n}\n\nexport default Cover;\n","import Cover from './Cover';\n\nconst loadImage = src => new Promise(resolve => {\n    const image = new Image();\n    image.src = src;\n    image.onload = e => {\n        resolve(e.target);\n    };\n});\n\nconst render = (callback, start?) => {\n    if (!start) {\n        start = Date.now();\n    }\n    if (callback(Date.now() - start)) {\n        requestAnimationFrame(() => render(callback, start));\n    }\n}\n\nconst initCanvas = async () => {\n    const w = document.body.offsetWidth, h = document.body.offsetHeight;\n    const canvas = document.querySelector('canvas');\n    canvas.width = w;\n    canvas.height = h;\n    const ctx = canvas.getContext('2d');\n\n    const images = await Promise.all([\n        '/assets/1.jpg',\n        '/assets/2.jpg',\n        '/assets/3.jpg',\n        '/assets/4.jpg',\n        '/assets/5.jpg',\n        '/assets/6.jpg',\n        '/assets/7.png',\n        '/assets/8.jpg',\n        '/assets/9.jpg',\n        '/assets/10.jpg',\n    ].map(loadImage));\n\n    const list = images.map(image => {\n        const x = Math.random() * w;\n        const y = Math.random() * h;\n        const speed = (0.01 + Math.random() * 0.01) * (v => Math[v >= 0 ? 'ceil' : 'floor'](v))(Math.random() - 0.5);\n        const vector = {\n            x: Math.random() * 0.2 - 0.1,\n            y: Math.random() * 0.2 - 0.1,\n        }\n        const cover = new Cover({\n            ctx,\n            image: image,\n            position: { x, y },\n            scale: 0.5,\n        });\n        return { x, y, speed, vector, cover };\n    });\n\n    ctx.font = '20px Arial';\n    let lastTime;\n    render(t => {\n        // canvas.width = canvas.width;\n        ctx.clearRect(0, 0, w, h);\n\n        list.forEach(item => {\n            const degrees = (t * item.speed) % 360;\n            const left = (item.x + t * item.vector.x) % w;\n            const top = (item.y + t * item.vector.y) % h;\n            const rect = item.cover\n                .setState({ degrees, left, top })\n                .draw()\n                .getRect();\n\n            if (rect.right > w && rect.bottom > h) {\n                item.cover.draw({ degrees, left: left - w, top: top - h });\n            }\n            if (rect.right > w) {\n                item.cover.draw({ degrees, left: left - w, top });\n            }\n            if (rect.bottom > h) {\n                item.cover.draw({ degrees, left, top: top - h });\n            }\n        });\n\n        if (process.env.NODE_ENV === 'development') {\n            ctx.fillStyle = '#000000';\n            ctx.fillRect(2, 2, 90, 21);\n            ctx.fillStyle = '#ffff00';\n            ctx.fillText(`FPS: ${Math.min(Math.floor(1000 / (t - lastTime)), 999)}`, 4, 20);\n        }\n        lastTime = t;\n\n        return true;// ++t < 5000;\n    });\n};\nconst main = () => {\n    initCanvas();\n};\n\ndocument.addEventListener('DOMContentLoaded', main);\n"]}