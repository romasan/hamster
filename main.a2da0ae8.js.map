{"version":3,"sources":["pages/test2/urlB64ToUint8Array.js","pages/test2/util.js","pages/test2/main.js"],"names":["urlB64ToUint8Array","base64String","base64","repeat","length","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","serverUrl","location","hostname","getPermission","Notification","requestPermission","status","console","log","getSubscription","pubkey","fetch","then","res","json","subscription","navigator","serviceWorker","getRegistration","registration","pushManager","subscribe","userVisibleOnly","applicationServerKey","mySubscription","sendToServer","JSON","stringify","toJSON","method","body","headers","catch","err","error","sendMessageViaServer","message","document","getElementById","value","displayNotificationDirectly","permission","options","icon","vibrate","data","dateOfArrival","Date","now","primaryKey","actions","action","title","showNotification","addEventListener","register","scope","update","forEach","func","util"],"mappings":"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","file":"main.a2da0ae8.js","sourceRoot":"..","sourcesContent":["export const urlB64ToUint8Array = (base64String) => {\n\tconst padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n\tconst base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\tconst rawData = window.atob(base64);\n\tconst outputArray = new Uint8Array(rawData.length);\n\n\tfor (let i = 0; i < rawData.length; ++i) {\n\t\toutputArray[i] = rawData.charCodeAt(i);\n\t}\n\n\treturn outputArray;\n};","import { urlB64ToUint8Array } from './urlB64ToUint8Array.js';\n\nconst serverUrl = `http://${window.location.hostname}:3000`;\n\nexport const getPermission = () => {\n\tNotification.requestPermission(function (status) {\n\t\tconsole.log('Notification permission status:', status);\n\t});\n};\n\nexport const getSubscription = async () => {\n\tconst { pubkey } = await fetch(`${serverUrl}/pubkey`).then((res) => res.json());\n\tconsole.log('fetched public key:', pubkey);\n\tconst subscription = await navigator.serviceWorker\n\t\t.getRegistration() //\n\t\t.then((registration) => {\n\t\t\treturn registration.pushManager.subscribe({\n\t\t\t\tuserVisibleOnly: true,\n\t\t\t\tapplicationServerKey: urlB64ToUint8Array(pubkey),\n\t\t\t});\n\t\t});\n\tconsole.log('created subscription:', subscription);\n\t// in production we would send it directly to our server and not store it on the window\n\twindow.mySubscription = subscription;\n};\n\nexport const sendToServer = async () => {\n\tif (!window.mySubscription) {\n\t\tconsole.log('No subscription yet created');\n\n\t\treturn;\n\t}\n\n\tconst subscription = JSON.stringify(window.mySubscription.toJSON(), null, 2);\n\n\tfetch(`${serverUrl}/subscription`, {\n\t\tmethod: 'POST',\n\t\tbody: subscription,\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t})\n\t\t.then((res) => console.log('successfully send subscription to server'))\n\t\t.catch((err) => console.error('error while sending to server', err));\n};\n\nexport const sendMessageViaServer = async () => {\n\tconst message = document.getElementById('message').value;\n\tconst body = JSON.stringify({ message }, null, 2);\n\n\tfetch(`${serverUrl}/send`, {\n\t\tmethod: 'POST',\n\t\tbody,\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t})\n\t\t.then((res) => console.log('successfully send message via server to push service'))\n\t\t.catch((err) => console.error('error while sending to server', err));\n};\n\nexport const displayNotificationDirectly = async () => {\n\tif (Notification.permission !== 'granted') {\n\t\tconsole.log('notification permission missing');\n\n\t\treturn;\n\t}\n\n\tconst options = {\n\t\tbody: 'This notification is send without a server, directly by the browser',\n\t\ticon: 'images/checkmark.png',\n\t\tvibrate: [100, 50, 100],\n\t\tdata: {\n\t\t\tdateOfArrival: Date.now(),\n\t\t\tprimaryKey: 1,\n\t\t},\n\t\tactions: [\n\t\t\t{\n\t\t\t\taction: 'explore',\n\t\t\t\ttitle: 'Explore this new world',\n\t\t\t\ticon: 'images/checkmark.png',\n\t\t\t},\n\t\t\t{\n\t\t\t\taction: 'close',\n\t\t\t\ttitle: 'Close notification',\n\t\t\t\ticon: 'images/xmark.png',\n\t\t\t},\n\t\t],\n\t};\n\n\tconst registration = await navigator.serviceWorker.getRegistration();\n\n\tregistration.showNotification('Notification without Push API', options);\n};","import * as util from './util.js';\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('./service-worker.js')\n      .then((registration) => {\n        console.log(`ServiceWorker registration successful with scope: ${registration.scope}`);\n        return registration.update();\n      })\n      .then((registration) => console.log(`ServiceWorker updated`))\n      .catch((err) => console.log('ServiceWorker registration failed: ', err));\n  });\n}\n\n['getPermission', 'getSubscription', 'sendToServer', 'sendMessageViaServer', 'displayNotificationDirectly'].forEach(\n  (func) => {\n    document.getElementById(`btn-${func}`).addEventListener('click', () => {\n      util[func]();\n    });\n  }\n);"]}